diff -uNr a/src/http/modules/ngx_http_autoindex_module.c b/src/http/modules/ngx_http_autoindex_module.c
--- a/src/http/modules/ngx_http_autoindex_module.c	Fri Oct 17 09:34:10 2014
+++ b/src/http/modules/ngx_http_autoindex_module.c	Fri Oct 17 10:27:15 2014
@@ -40,6 +40,8 @@
     ngx_flag_t     enable;
     ngx_flag_t     localtime;
     ngx_flag_t     exact_size;
+    ngx_uint_t     name_last;
+    ngx_uint_t     max_name_len;
 } ngx_http_autoindex_loc_conf_t;
 
 
@@ -81,6 +83,20 @@
       offsetof(ngx_http_autoindex_loc_conf_t, exact_size),
       NULL },
 
+    { ngx_string("autoindex_name_last"),
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_TAKE1,
+      ngx_conf_set_num_slot,
+      NGX_HTTP_LOC_CONF_OFFSET,
+      offsetof(ngx_http_autoindex_loc_conf_t, name_last),
+      NULL },
+
+    { ngx_string("autoindex_max_name_len"),
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_TAKE1,
+      ngx_conf_set_num_slot,
+      NGX_HTTP_LOC_CONF_OFFSET,
+      offsetof(ngx_http_autoindex_loc_conf_t, max_name_len),
+      NULL },
+
       ngx_null_command
 };
 
@@ -125,7 +141,7 @@
 static u_char header[] =
 "</title></head>" CRLF
 "<body bgcolor=\"white\">" CRLF
-"<h1>Index of "
+"<b>Index of "
 ;
 
 static u_char tail[] =
@@ -138,12 +154,13 @@
 ngx_http_autoindex_handler(ngx_http_request_t *r)
 {
     u_char                         *last, *filename, scale;
-    off_t                           length;
-    size_t                          len, char_len, escape_html, allocated, root;
+    size_t                          len, char_len, escape_html, allocated, root,
+                                    tmp_name_len = 0;
     ngx_tm_t                        tm;
     ngx_err_t                       err;
     ngx_buf_t                      *b;
-    ngx_int_t                       rc, size;
+    ngx_int_t                       rc;
+    float                           size, length;
     ngx_str_t                       path;
     ngx_dir_t                       dir;
     ngx_uint_t                      i, level, utf8;
@@ -154,9 +171,6 @@
     ngx_http_autoindex_entry_t     *entry;
     ngx_http_autoindex_loc_conf_t  *alcf;
 
-    static char  *months[] = { "Jan", "Feb", "Mar", "Apr", "May", "Jun",
-                               "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };
-
     if (r->uri.data[r->uri.len - 1] != '/') {
         return NGX_DECLINED;
     }
@@ -351,11 +365,25 @@
             entry->utf_len = len;
         }
 
+        if (entry->name.len > tmp_name_len) {
+            tmp_name_len = entry->name.len;
+        }
+
         entry->dir = ngx_de_is_dir(&dir);
         entry->mtime = ngx_de_mtime(&dir);
         entry->size = ngx_de_size(&dir);
     }
 
+    if (alcf->max_name_len - tmp_name_len > alcf->name_last) {
+        alcf->max_name_len = tmp_name_len + alcf->name_last;
+    }
+
+   /*
+    if (NGX_HTTP_AUTOINDEX_NAME_LEN > alcf->max_name_len) {
+        alcf->max_name_len = NGX_HTTP_AUTOINDEX_NAME_LEN;
+    }
+    */
+
     if (ngx_close_dir(&dir) == NGX_ERROR) {
         ngx_log_error(NGX_LOG_ALERT, r->connection->log, ngx_errno,
                       ngx_close_dir_n " \"%V\" failed", &path);
@@ -367,7 +395,7 @@
           + r->uri.len + escape_html
           + sizeof(header) - 1
           + r->uri.len + escape_html
-          + sizeof("</h1>") - 1
+          + sizeof("</b>") - 1
           + sizeof("<hr><pre><a href=\"../\">../</a>" CRLF) - 1
           + sizeof("</pre><hr>") - 1
           + sizeof(tail) - 1;
@@ -380,9 +408,9 @@
             + sizeof("\">") - 1
             + entry[i].name.len - entry[i].utf_len
             + entry[i].escape_html
-            + NGX_HTTP_AUTOINDEX_NAME_LEN + sizeof("&gt;") - 2
+            + alcf->max_name_len + sizeof("&gt;") - 2
             + sizeof("</a>") - 1
-            + sizeof(" 28-Sep-1970 12:00 ") - 1
+            + sizeof(" 1970-09-28 12:00:00 ") - 1
             + 20                                         /* the file size */
             + 2;
     }
@@ -411,7 +439,7 @@
         b->last = ngx_cpymem(b->last, r->uri.data, r->uri.len);
     }
 
-    b->last = ngx_cpymem(b->last, "</h1>", sizeof("</h1>") - 1);
+    b->last = ngx_cpymem(b->last, "</b>", sizeof("</b>") - 1);
 
     b->last = ngx_cpymem(b->last, "<hr><pre><a href=\"../\">../</a>" CRLF,
                          sizeof("<hr><pre><a href=\"../\">../</a>" CRLF) - 1);
@@ -442,11 +470,11 @@
         len = entry[i].utf_len;
 
         if (entry[i].name.len != len) {
-            if (len > NGX_HTTP_AUTOINDEX_NAME_LEN) {
-                char_len = NGX_HTTP_AUTOINDEX_NAME_LEN - 3 + 1;
+            if (len > alcf->max_name_len) {
+                char_len = alcf->max_name_len - 3 + 1;
 
             } else {
-                char_len = NGX_HTTP_AUTOINDEX_NAME_LEN + 1;
+                char_len = alcf->max_name_len + 1;
             }
 
             last = b->last;
@@ -462,8 +490,8 @@
 
         } else {
             if (entry[i].escape_html) {
-                if (len > NGX_HTTP_AUTOINDEX_NAME_LEN) {
-                    char_len = NGX_HTTP_AUTOINDEX_NAME_LEN - 3;
+                if (len > alcf->max_name_len) {
+                    char_len = alcf->max_name_len - 3;
 
                 } else {
                     char_len = len;
@@ -475,25 +503,25 @@
 
             } else {
                 b->last = ngx_cpystrn(b->last, entry[i].name.data,
-                                      NGX_HTTP_AUTOINDEX_NAME_LEN + 1);
+                                      alcf->max_name_len + 1);
                 last = b->last - 3;
             }
         }
 
-        if (len > NGX_HTTP_AUTOINDEX_NAME_LEN) {
+        if (len > alcf->max_name_len) {
             b->last = ngx_cpymem(last, "..&gt;</a>", sizeof("..&gt;</a>") - 1);
 
         } else {
-            if (entry[i].dir && NGX_HTTP_AUTOINDEX_NAME_LEN - len > 0) {
+            if (entry[i].dir && alcf->max_name_len - len > 0) {
                 *b->last++ = '/';
                 len++;
             }
 
             b->last = ngx_cpymem(b->last, "</a>", sizeof("</a>") - 1);
 
-            if (NGX_HTTP_AUTOINDEX_NAME_LEN - len > 0) {
-                ngx_memset(b->last, ' ', NGX_HTTP_AUTOINDEX_NAME_LEN - len);
-                b->last += NGX_HTTP_AUTOINDEX_NAME_LEN - len;
+            if (alcf->max_name_len - len > 0) {
+                ngx_memset(b->last, ' ', alcf->max_name_len - len);
+                b->last += alcf->max_name_len - len;
             }
         }
 
@@ -501,12 +529,13 @@
 
         ngx_gmtime(entry[i].mtime + tp->gmtoff * 60 * alcf->localtime, &tm);
 
-        b->last = ngx_sprintf(b->last, "%02d-%s-%d %02d:%02d ",
-                              tm.ngx_tm_mday,
-                              months[tm.ngx_tm_mon - 1],
+        b->last = ngx_sprintf(b->last, "%d-%02d-%02d %02d:%02d:%02d ",
                               tm.ngx_tm_year,
+                              tm.ngx_tm_mon,
+                              tm.ngx_tm_mday,
                               tm.ngx_tm_hour,
-                              tm.ngx_tm_min);
+                              tm.ngx_tm_min,
+                              tm.ngx_tm_sec);
 
         if (alcf->exact_size) {
             if (entry[i].dir) {
@@ -522,38 +551,27 @@
                                      sizeof("      -") - 1);
 
             } else {
-                length = entry[i].size;
+                length = (float) entry[i].size;
 
                 if (length > 1024 * 1024 * 1024 - 1) {
-                    size = (ngx_int_t) (length / (1024 * 1024 * 1024));
-                    if ((length % (1024 * 1024 * 1024))
-                                                > (1024 * 1024 * 1024 / 2 - 1))
-                    {
-                        size++;
-                    }
+                    size = length / (1024 * 1024 * 1024);
                     scale = 'G';
 
                 } else if (length > 1024 * 1024 - 1) {
-                    size = (ngx_int_t) (length / (1024 * 1024));
-                    if ((length % (1024 * 1024)) > (1024 * 1024 / 2 - 1)) {
-                        size++;
-                    }
+                    size = length / (1024 * 1024);
                     scale = 'M';
 
-                } else if (length > 9999) {
-                    size = (ngx_int_t) (length / 1024);
-                    if (length % 1024 > 511) {
-                        size++;
-                    }
+                } else if (length > 1023) {
+                    size = length / 1024;
                     scale = 'K';
 
                 } else {
-                    size = (ngx_int_t) length;
-                    scale = '\0';
+                    size = length;
+                    scale = 'B';
                 }
 
                 if (scale) {
-                    b->last = ngx_sprintf(b->last, "%6i%c", size, scale);
+                    b->last = ngx_sprintf(b->last, "%6.2f%c", size, scale);
 
                 } else {
                     b->last = ngx_sprintf(b->last, " %6i", size);
@@ -667,6 +685,8 @@
     conf->enable = NGX_CONF_UNSET;
     conf->localtime = NGX_CONF_UNSET;
     conf->exact_size = NGX_CONF_UNSET;
+    conf->name_last = NGX_CONF_UNSET_UINT;
+    conf->max_name_len = NGX_CONF_UNSET_UINT;
 
     return conf;
 }
@@ -681,6 +701,9 @@
     ngx_conf_merge_value(conf->enable, prev->enable, 0);
     ngx_conf_merge_value(conf->localtime, prev->localtime, 0);
     ngx_conf_merge_value(conf->exact_size, prev->exact_size, 1);
+    ngx_conf_merge_uint_value(conf->name_last, prev->name_last, 0);
+    ngx_conf_merge_uint_value(conf->max_name_len, prev->max_name_len,
+                              NGX_HTTP_AUTOINDEX_NAME_LEN);
 
     return NGX_CONF_OK;
 }
